*,
*::after,
*::before {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-size: 1.125rem;
  line-height: 150%;
}

.section {
  padding-block: 1.5rem;
}

.section > h2 {
  max-width: 60rem;
  margin-inline: auto;
  margin-block: 0;
  padding: 1.5rem;
  margin-bottom: 0.75rem;

  // section 아래에 있는 h2
}
.container {
  max-width: 60rem;
  margin-inline: auto;
  padding-inline: 1.5rem;
  background-color: oklch(0.95 0.05 240);
}

.grid {
  display: grid;

  &__item {
    &--nth {
      @for $i from 1 through 12 {
        &-#{$i} {
          background-color: oklch(0.9 0.05 $i * 30);
          // 색이 그라데이션으로 들어감
          // @for 구문 매우 중요함 가상의 숫자를 만들어주는데 숫자가 그 안에서 단계적으로 증가함
          // #처리를 하는 이유는 css에서 적용을 해주기 위해서 해줘야되는 것
        }
      }
    }
  }

  &--opt-1 {
    grid-template-columns: 0.5fr 1fr 2fr; // 1 2 4
    // grid-template-rows: 1fr 1fr 1fr 1fr;
    // grid 단점은 몇 줄이 들어갈지 이미 정해져있기 때문에 개수가 늘어나면 못 들어감
    grid-template-rows: 4fr;
    grid-auto-rows: 1fr;
    // 앞으로 새로 생기는거 다 넣어줌
    // colums은 가로로 놓이는 것
    // rows는 세로 열
    // 1fr을 넣으면 무조건 비율을 지켜가면서 커졌다 작아졌다 해라
    // 1fr 2fr 1fr을 하면 비율이 1:2:1이 됨 어떤 숫자를 넣어도 가능
    column-gap: 0.75rem;
    row-gap: 1.5rem;
  }

  &--opt-2 {
    // grid-template-columns: repeat(3, 1fr);
    // grid-template-columns: 200px repeat(2, 1fr);
    // 패륜 (부모 찢어)
    // grid-template-columns: repeat(3, minmax(100px, 1fr));
    // repeat 함수를 이중으로 사용함
    // min은 명시적인 값을 넣음, max에는 1fr 같은 값을 넣어줌
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    // 화면이 작아지면 밑으로 내려감 (정렬됨)
    grid-auto-rows: minmax(200px 1fr);
    column-gap: 0.75rem;
    row-gap: 1.5rem;
  }
}

// 그리드랑 플렉스랑 하는 일은 비슷함
// 그리느는 각 칸마다 최소 최대를 정해줄 수 있음 넘으면 다음칸으로 넘어가거나 함
// flex로 문서 양 옆으로 놓는 것이 가능해짐
// flex 줄바꿈 활성화 시키는법 -> flex 기본값을 wrap으로 놓으면됨
// 모든 요소들은 내가 건들이지 않는이상 가로로 최대한 늘어나려고 한다
// 세로 요소들은 내가 건들이는만큼만 늘어난다
// flex 은근히 쓰기 좋으면서도 별로임 차라리 grid가 나음 flex 비추
// width는 max-width로 하는게 좋음 그리고 그냥 안넣는게 나음
